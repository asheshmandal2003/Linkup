// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  first_name String
  last_name  String
  username   String   @unique
  email      String   @unique
  password   String
  role       Role     @default(USER)
  verified   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  profile    Profile? @relation(name: "UserProfile")

  @@index([email, username])
}

model Profile {
  id            String         @id @default(uuid())
  userId        String         @unique
  user          User           @relation(name: "UserProfile", fields: [userId], references: [id], onDelete: Cascade)
  isPrivate     Boolean        @default(false)
  avatar        String?
  cover         String?
  bio           String?
  dob           DateTime?
  location      String?
  posts         Post[]         @relation(name: "user_posts")
  likedPosts    PostLike[]     @relation(name: "user_likes")
  comments      Comment[]      @relation(name: "user_comments")
  replies       Reply[]        @relation(name: "user_replies")
  likedComments CommentLikes[] @relation(name: "user_comment_likes")
  followers     Connection[]   @relation(name: "followers")
  followings    Connection[]   @relation(name: "followings")
}

model Connection {
  id         String  @id @default(uuid())
  userId     String
  followerId String
  followings Profile @relation(name: "followings", fields: [userId], references: [id], onDelete: Cascade)
  followers  Profile @relation(name: "followers", fields: [followerId], references: [id], onDelete: Cascade)
}

model Post {
  id        String     @id @default(uuid())
  profileId String
  profile   Profile    @relation(name: "user_posts", fields: [profileId], references: [id], onDelete: Cascade)
  image     String
  caption   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  likes     PostLike[] @relation(name: "post_likes")
  comments  Comment[]  @relation(name: "post_comments")
  hashtags  Hashtag[]  @relation(name: "post_hashtags")
}

model PostLike {
  id        String  @id @default(uuid())
  profileId String
  postId    String
  profile   Profile @relation(name: "user_likes", fields: [profileId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  post      Post    @relation(name: "post_likes", fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Comment {
  id        String         @id @default(uuid())
  profileId String
  postId    String
  profile   Profile        @relation(name: "user_comments", fields: [profileId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  post      Post           @relation(name: "post_comments", fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  comment   String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now())
  replies   Reply[]        @relation(name: "comment_replies")
  likes     CommentLikes[] @relation(name: "comment_likes")
}

model Hashtag {
  id      String @id @default(uuid())
  postId  String
  post    Post   @relation(name: "post_hashtags", fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  hashtag String
}

model Reply {
  id        String   @id @default(uuid())
  userId    String
  commentId String
  profile   Profile  @relation(name: "user_replies", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment   Comment  @relation(name: "comment_replies", fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reply     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model CommentLikes {
  id        String  @id @default(uuid())
  profileId String
  commentId String
  profile   Profile @relation(name: "user_comment_likes", fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment   Comment @relation("comment_likes", fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum Role {
  USER
  ADMIN
}
